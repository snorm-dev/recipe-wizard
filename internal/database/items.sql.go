// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: items.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (created_at, updated_at, ingredient_id, grocery_list_id, meal_id, name, description, amount, units, standard_amount, standard_units)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, created_at, updated_at, grocery_list_id, meal_id, ingredient_id, name, description, amount, units, standard_amount, standard_units, is_complete
`

type CreateItemParams struct {
	CreatedAt      time.Time
	UpdatedAt      time.Time
	IngredientID   sql.NullInt64
	GroceryListID  int64
	MealID         sql.NullInt64
	Name           string
	Description    sql.NullString
	Amount         float64
	Units          string
	StandardAmount float64
	StandardUnits  string
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IngredientID,
		arg.GroceryListID,
		arg.MealID,
		arg.Name,
		arg.Description,
		arg.Amount,
		arg.Units,
		arg.StandardAmount,
		arg.StandardUnits,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroceryListID,
		&i.MealID,
		&i.IngredientID,
		&i.Name,
		&i.Description,
		&i.Amount,
		&i.Units,
		&i.StandardAmount,
		&i.StandardUnits,
		&i.IsComplete,
	)
	return i, err
}

const getExtendedItem = `-- name: GetExtendedItem :one
SELECT it.id, it.created_at, it.updated_at, it.grocery_list_id, it.meal_id, it.ingredient_id, it.name, it.description, it.amount, it.units, it.standard_amount, it.standard_units, it.is_complete, i.id, i.created_at, i.updated_at, i.name, i.description, i.recipe_id, i.amount, i.units, i.standard_amount, i.standard_units FROM items it
LEFT JOIN ingredients i ON it.ingredient_id = i.id
WHERE it.id = ?
`

type GetExtendedItemRow struct {
	Item       Item
	Ingredient Ingredient
}

func (q *Queries) GetExtendedItem(ctx context.Context, id int64) (GetExtendedItemRow, error) {
	row := q.db.QueryRowContext(ctx, getExtendedItem, id)
	var i GetExtendedItemRow
	err := row.Scan(
		&i.Item.ID,
		&i.Item.CreatedAt,
		&i.Item.UpdatedAt,
		&i.Item.GroceryListID,
		&i.Item.MealID,
		&i.Item.IngredientID,
		&i.Item.Name,
		&i.Item.Description,
		&i.Item.Amount,
		&i.Item.Units,
		&i.Item.StandardAmount,
		&i.Item.StandardUnits,
		&i.Item.IsComplete,
		&i.Ingredient.ID,
		&i.Ingredient.CreatedAt,
		&i.Ingredient.UpdatedAt,
		&i.Ingredient.Name,
		&i.Ingredient.Description,
		&i.Ingredient.RecipeID,
		&i.Ingredient.Amount,
		&i.Ingredient.Units,
		&i.Ingredient.StandardAmount,
		&i.Ingredient.StandardUnits,
	)
	return i, err
}

const getExtendedItemsForGroceryList = `-- name: GetExtendedItemsForGroceryList :many
SELECT it.id, it.created_at, it.updated_at, it.grocery_list_id, it.meal_id, it.ingredient_id, it.name, it.description, it.amount, it.units, it.standard_amount, it.standard_units, it.is_complete, i.id, i.created_at, i.updated_at, i.name, i.description, i.recipe_id, i.amount, i.units, i.standard_amount, i.standard_units FROM items it
LEFT JOIN ingredients i ON it.ingredient_id = i.id
WHERE it.grocery_list_id = ?
`

type GetExtendedItemsForGroceryListRow struct {
	Item       Item
	Ingredient Ingredient
}

func (q *Queries) GetExtendedItemsForGroceryList(ctx context.Context, groceryListID int64) ([]GetExtendedItemsForGroceryListRow, error) {
	rows, err := q.db.QueryContext(ctx, getExtendedItemsForGroceryList, groceryListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExtendedItemsForGroceryListRow
	for rows.Next() {
		var i GetExtendedItemsForGroceryListRow
		if err := rows.Scan(
			&i.Item.ID,
			&i.Item.CreatedAt,
			&i.Item.UpdatedAt,
			&i.Item.GroceryListID,
			&i.Item.MealID,
			&i.Item.IngredientID,
			&i.Item.Name,
			&i.Item.Description,
			&i.Item.Amount,
			&i.Item.Units,
			&i.Item.StandardAmount,
			&i.Item.StandardUnits,
			&i.Item.IsComplete,
			&i.Ingredient.ID,
			&i.Ingredient.CreatedAt,
			&i.Ingredient.UpdatedAt,
			&i.Ingredient.Name,
			&i.Ingredient.Description,
			&i.Ingredient.RecipeID,
			&i.Ingredient.Amount,
			&i.Ingredient.Units,
			&i.Ingredient.StandardAmount,
			&i.Ingredient.StandardUnits,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExtendedItemsForMeal = `-- name: GetExtendedItemsForMeal :many
SELECT it.id, it.created_at, it.updated_at, it.grocery_list_id, it.meal_id, it.ingredient_id, it.name, it.description, it.amount, it.units, it.standard_amount, it.standard_units, it.is_complete, i.id, i.created_at, i.updated_at, i.name, i.description, i.recipe_id, i.amount, i.units, i.standard_amount, i.standard_units FROM items it
LEFT JOIN ingredients i ON it.ingredient_id = i.id
WHERE it.meal_id = ?
`

type GetExtendedItemsForMealRow struct {
	Item       Item
	Ingredient Ingredient
}

func (q *Queries) GetExtendedItemsForMeal(ctx context.Context, mealID sql.NullInt64) ([]GetExtendedItemsForMealRow, error) {
	rows, err := q.db.QueryContext(ctx, getExtendedItemsForMeal, mealID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExtendedItemsForMealRow
	for rows.Next() {
		var i GetExtendedItemsForMealRow
		if err := rows.Scan(
			&i.Item.ID,
			&i.Item.CreatedAt,
			&i.Item.UpdatedAt,
			&i.Item.GroceryListID,
			&i.Item.MealID,
			&i.Item.IngredientID,
			&i.Item.Name,
			&i.Item.Description,
			&i.Item.Amount,
			&i.Item.Units,
			&i.Item.StandardAmount,
			&i.Item.StandardUnits,
			&i.Item.IsComplete,
			&i.Ingredient.ID,
			&i.Ingredient.CreatedAt,
			&i.Ingredient.UpdatedAt,
			&i.Ingredient.Name,
			&i.Ingredient.Description,
			&i.Ingredient.RecipeID,
			&i.Ingredient.Amount,
			&i.Ingredient.Units,
			&i.Ingredient.StandardAmount,
			&i.Ingredient.StandardUnits,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItem = `-- name: GetItem :one
SELECT id, created_at, updated_at, grocery_list_id, meal_id, ingredient_id, name, description, amount, units, standard_amount, standard_units, is_complete FROM items
WHERE id = ?
`

func (q *Queries) GetItem(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroceryListID,
		&i.MealID,
		&i.IngredientID,
		&i.Name,
		&i.Description,
		&i.Amount,
		&i.Units,
		&i.StandardAmount,
		&i.StandardUnits,
		&i.IsComplete,
	)
	return i, err
}

const getItemAndGroceryList = `-- name: GetItemAndGroceryList :one
SELECT it.id, it.created_at, it.updated_at, it.grocery_list_id, it.meal_id, it.ingredient_id, it.name, it.description, it.amount, it.units, it.standard_amount, it.standard_units, it.is_complete, gl.id, gl.created_at, gl.updated_at, gl.name, gl.owner_id FROM items it
JOIN grocery_lists gl ON it.grocery_list_id = gl.id
WHERE it.id = ?
`

type GetItemAndGroceryListRow struct {
	Item        Item
	GroceryList GroceryList
}

func (q *Queries) GetItemAndGroceryList(ctx context.Context, id int64) (GetItemAndGroceryListRow, error) {
	row := q.db.QueryRowContext(ctx, getItemAndGroceryList, id)
	var i GetItemAndGroceryListRow
	err := row.Scan(
		&i.Item.ID,
		&i.Item.CreatedAt,
		&i.Item.UpdatedAt,
		&i.Item.GroceryListID,
		&i.Item.MealID,
		&i.Item.IngredientID,
		&i.Item.Name,
		&i.Item.Description,
		&i.Item.Amount,
		&i.Item.Units,
		&i.Item.StandardAmount,
		&i.Item.StandardUnits,
		&i.Item.IsComplete,
		&i.GroceryList.ID,
		&i.GroceryList.CreatedAt,
		&i.GroceryList.UpdatedAt,
		&i.GroceryList.Name,
		&i.GroceryList.OwnerID,
	)
	return i, err
}

const getItemsForGroceryList = `-- name: GetItemsForGroceryList :many
SELECT id, created_at, updated_at, grocery_list_id, meal_id, ingredient_id, name, description, amount, units, standard_amount, standard_units, is_complete FROM items it 
WHERE it.grocery_list_id = ?
`

func (q *Queries) GetItemsForGroceryList(ctx context.Context, groceryListID int64) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsForGroceryList, groceryListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroceryListID,
			&i.MealID,
			&i.IngredientID,
			&i.Name,
			&i.Description,
			&i.Amount,
			&i.Units,
			&i.StandardAmount,
			&i.StandardUnits,
			&i.IsComplete,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsForGroceryListByName = `-- name: GetItemsForGroceryListByName :many
SELECT id, created_at, updated_at, grocery_list_id, meal_id, ingredient_id, name, description, amount, units, standard_amount, standard_units, is_complete FROM items it 
WHERE it.grocery_list_id = ? AND name = ?
`

type GetItemsForGroceryListByNameParams struct {
	GroceryListID int64
	Name          string
}

func (q *Queries) GetItemsForGroceryListByName(ctx context.Context, arg GetItemsForGroceryListByNameParams) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsForGroceryListByName, arg.GroceryListID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroceryListID,
			&i.MealID,
			&i.IngredientID,
			&i.Name,
			&i.Description,
			&i.Amount,
			&i.Units,
			&i.StandardAmount,
			&i.StandardUnits,
			&i.IsComplete,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsForMeal = `-- name: GetItemsForMeal :many
SELECT id, created_at, updated_at, grocery_list_id, meal_id, ingredient_id, name, description, amount, units, standard_amount, standard_units, is_complete FROM items it 
WHERE it.meal_id = ?
`

func (q *Queries) GetItemsForMeal(ctx context.Context, mealID sql.NullInt64) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsForMeal, mealID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroceryListID,
			&i.MealID,
			&i.IngredientID,
			&i.Name,
			&i.Description,
			&i.Amount,
			&i.Units,
			&i.StandardAmount,
			&i.StandardUnits,
			&i.IsComplete,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setIsComplete = `-- name: SetIsComplete :exec
UPDATE items
SET updated_at = ?, is_complete = ?
WHERE id = ?
`

type SetIsCompleteParams struct {
	UpdatedAt  time.Time
	IsComplete bool
	ID         int64
}

func (q *Queries) SetIsComplete(ctx context.Context, arg SetIsCompleteParams) error {
	_, err := q.db.ExecContext(ctx, setIsComplete, arg.UpdatedAt, arg.IsComplete, arg.ID)
	return err
}
