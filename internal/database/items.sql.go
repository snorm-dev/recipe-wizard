// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: items.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createItem = `-- name: CreateItem :execresult
INSERT INTO ingredient_instances (created_at, updated_at, ingredient_id, grocery_list_id, recipe_instance_id)
VALUES (?, ?, ?, ?, ?)
`

type CreateItemParams struct {
	CreatedAt        time.Time
	UpdatedAt        time.Time
	IngredientID     int64
	GroceryListID    int64
	RecipeInstanceID sql.NullInt64
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createItem,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IngredientID,
		arg.GroceryListID,
		arg.RecipeInstanceID,
	)
}

const getExtendedItem = `-- name: GetExtendedItem :one
SELECT ii.id, ii.created_at, ii.updated_at, ii.grocery_list_id, ii.recipe_instance_id, ii.ingredient_id, i.id, i.created_at, i.updated_at, i.name, i.description, i.recipe_id, i.amount, i.units, i.standard_amount, i.standard_units FROM ingredient_instances ii
JOIN ingredients i ON ii.ingredient_id = i.id
WHERE ii.id = ?
`

type GetExtendedItemRow struct {
	IngredientInstance IngredientInstance
	Ingredient         Ingredient
}

func (q *Queries) GetExtendedItem(ctx context.Context, id int64) (GetExtendedItemRow, error) {
	row := q.db.QueryRowContext(ctx, getExtendedItem, id)
	var i GetExtendedItemRow
	err := row.Scan(
		&i.IngredientInstance.ID,
		&i.IngredientInstance.CreatedAt,
		&i.IngredientInstance.UpdatedAt,
		&i.IngredientInstance.GroceryListID,
		&i.IngredientInstance.RecipeInstanceID,
		&i.IngredientInstance.IngredientID,
		&i.Ingredient.ID,
		&i.Ingredient.CreatedAt,
		&i.Ingredient.UpdatedAt,
		&i.Ingredient.Name,
		&i.Ingredient.Description,
		&i.Ingredient.RecipeID,
		&i.Ingredient.Amount,
		&i.Ingredient.Units,
		&i.Ingredient.StandardAmount,
		&i.Ingredient.StandardUnits,
	)
	return i, err
}

const getExtendedItemsForGroceryList = `-- name: GetExtendedItemsForGroceryList :many
SELECT ii.id, ii.created_at, ii.updated_at, ii.grocery_list_id, ii.recipe_instance_id, ii.ingredient_id, i.id, i.created_at, i.updated_at, i.name, i.description, i.recipe_id, i.amount, i.units, i.standard_amount, i.standard_units FROM ingredient_instances ii
JOIN ingredients i ON ii.ingredient_id = i.id
WHERE ii.grocery_list_id = ?
`

type GetExtendedItemsForGroceryListRow struct {
	IngredientInstance IngredientInstance
	Ingredient         Ingredient
}

func (q *Queries) GetExtendedItemsForGroceryList(ctx context.Context, groceryListID int64) ([]GetExtendedItemsForGroceryListRow, error) {
	rows, err := q.db.QueryContext(ctx, getExtendedItemsForGroceryList, groceryListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExtendedItemsForGroceryListRow
	for rows.Next() {
		var i GetExtendedItemsForGroceryListRow
		if err := rows.Scan(
			&i.IngredientInstance.ID,
			&i.IngredientInstance.CreatedAt,
			&i.IngredientInstance.UpdatedAt,
			&i.IngredientInstance.GroceryListID,
			&i.IngredientInstance.RecipeInstanceID,
			&i.IngredientInstance.IngredientID,
			&i.Ingredient.ID,
			&i.Ingredient.CreatedAt,
			&i.Ingredient.UpdatedAt,
			&i.Ingredient.Name,
			&i.Ingredient.Description,
			&i.Ingredient.RecipeID,
			&i.Ingredient.Amount,
			&i.Ingredient.Units,
			&i.Ingredient.StandardAmount,
			&i.Ingredient.StandardUnits,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExtendedItemsForRecipeInstance = `-- name: GetExtendedItemsForRecipeInstance :many
SELECT ii.id, ii.created_at, ii.updated_at, ii.grocery_list_id, ii.recipe_instance_id, ii.ingredient_id, i.id, i.created_at, i.updated_at, i.name, i.description, i.recipe_id, i.amount, i.units, i.standard_amount, i.standard_units FROM ingredient_instances ii
JOIN ingredients i ON ii.ingredient_id = i.id
WHERE ii.recipe_instance_id = ?
`

type GetExtendedItemsForRecipeInstanceRow struct {
	IngredientInstance IngredientInstance
	Ingredient         Ingredient
}

func (q *Queries) GetExtendedItemsForRecipeInstance(ctx context.Context, recipeInstanceID sql.NullInt64) ([]GetExtendedItemsForRecipeInstanceRow, error) {
	rows, err := q.db.QueryContext(ctx, getExtendedItemsForRecipeInstance, recipeInstanceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExtendedItemsForRecipeInstanceRow
	for rows.Next() {
		var i GetExtendedItemsForRecipeInstanceRow
		if err := rows.Scan(
			&i.IngredientInstance.ID,
			&i.IngredientInstance.CreatedAt,
			&i.IngredientInstance.UpdatedAt,
			&i.IngredientInstance.GroceryListID,
			&i.IngredientInstance.RecipeInstanceID,
			&i.IngredientInstance.IngredientID,
			&i.Ingredient.ID,
			&i.Ingredient.CreatedAt,
			&i.Ingredient.UpdatedAt,
			&i.Ingredient.Name,
			&i.Ingredient.Description,
			&i.Ingredient.RecipeID,
			&i.Ingredient.Amount,
			&i.Ingredient.Units,
			&i.Ingredient.StandardAmount,
			&i.Ingredient.StandardUnits,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItem = `-- name: GetItem :one
SELECT id, created_at, updated_at, grocery_list_id, recipe_instance_id, ingredient_id FROM ingredient_instances
WHERE id = ?
`

func (q *Queries) GetItem(ctx context.Context, id int64) (IngredientInstance, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i IngredientInstance
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroceryListID,
		&i.RecipeInstanceID,
		&i.IngredientID,
	)
	return i, err
}

const getItemsForGroceryList = `-- name: GetItemsForGroceryList :many
SELECT id, created_at, updated_at, grocery_list_id, recipe_instance_id, ingredient_id FROM ingredient_instances ii 
WHERE ii.grocery_list_id = ?
`

func (q *Queries) GetItemsForGroceryList(ctx context.Context, groceryListID int64) ([]IngredientInstance, error) {
	rows, err := q.db.QueryContext(ctx, getItemsForGroceryList, groceryListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IngredientInstance
	for rows.Next() {
		var i IngredientInstance
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroceryListID,
			&i.RecipeInstanceID,
			&i.IngredientID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsForRecipeInstance = `-- name: GetItemsForRecipeInstance :many
SELECT id, created_at, updated_at, grocery_list_id, recipe_instance_id, ingredient_id FROM ingredient_instances ii 
WHERE ii.recipe_instance_id = ?
`

func (q *Queries) GetItemsForRecipeInstance(ctx context.Context, recipeInstanceID sql.NullInt64) ([]IngredientInstance, error) {
	rows, err := q.db.QueryContext(ctx, getItemsForRecipeInstance, recipeInstanceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IngredientInstance
	for rows.Next() {
		var i IngredientInstance
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroceryListID,
			&i.RecipeInstanceID,
			&i.IngredientID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
