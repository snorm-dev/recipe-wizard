// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: items.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createItem = `-- name: CreateItem :execresult
INSERT INTO items (created_at, updated_at, ingredient_id, grocery_list_id, recipe_instance_id, name, description, amount, units, standard_amount, standard_units)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateItemParams struct {
	CreatedAt        time.Time
	UpdatedAt        time.Time
	IngredientID     sql.NullInt64
	GroceryListID    int64
	RecipeInstanceID sql.NullInt64
	Name             string
	Description      sql.NullString
	Amount           float64
	Units            string
	StandardAmount   float64
	StandardUnits    string
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createItem,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IngredientID,
		arg.GroceryListID,
		arg.RecipeInstanceID,
		arg.Name,
		arg.Description,
		arg.Amount,
		arg.Units,
		arg.StandardAmount,
		arg.StandardUnits,
	)
}

const getExtendedItem = `-- name: GetExtendedItem :one
SELECT it.id, it.created_at, it.updated_at, it.grocery_list_id, it.recipe_instance_id, it.ingredient_id, it.name, it.description, it.amount, it.units, it.standard_amount, it.standard_units, i.id, i.created_at, i.updated_at, i.name, i.description, i.recipe_id, i.amount, i.units, i.standard_amount, i.standard_units FROM items it
LEFT JOIN ingredients i ON it.ingredient_id = i.id
WHERE it.id = ?
`

type GetExtendedItemRow struct {
	Item       Item
	Ingredient Ingredient
}

func (q *Queries) GetExtendedItem(ctx context.Context, id int64) (GetExtendedItemRow, error) {
	row := q.db.QueryRowContext(ctx, getExtendedItem, id)
	var i GetExtendedItemRow
	err := row.Scan(
		&i.Item.ID,
		&i.Item.CreatedAt,
		&i.Item.UpdatedAt,
		&i.Item.GroceryListID,
		&i.Item.RecipeInstanceID,
		&i.Item.IngredientID,
		&i.Item.Name,
		&i.Item.Description,
		&i.Item.Amount,
		&i.Item.Units,
		&i.Item.StandardAmount,
		&i.Item.StandardUnits,
		&i.Ingredient.ID,
		&i.Ingredient.CreatedAt,
		&i.Ingredient.UpdatedAt,
		&i.Ingredient.Name,
		&i.Ingredient.Description,
		&i.Ingredient.RecipeID,
		&i.Ingredient.Amount,
		&i.Ingredient.Units,
		&i.Ingredient.StandardAmount,
		&i.Ingredient.StandardUnits,
	)
	return i, err
}

const getExtendedItemsForGroceryList = `-- name: GetExtendedItemsForGroceryList :many
SELECT it.id, it.created_at, it.updated_at, it.grocery_list_id, it.recipe_instance_id, it.ingredient_id, it.name, it.description, it.amount, it.units, it.standard_amount, it.standard_units, i.id, i.created_at, i.updated_at, i.name, i.description, i.recipe_id, i.amount, i.units, i.standard_amount, i.standard_units FROM items it
LEFT JOIN ingredients i ON it.ingredient_id = i.id
WHERE it.grocery_list_id = ?
`

type GetExtendedItemsForGroceryListRow struct {
	Item       Item
	Ingredient Ingredient
}

func (q *Queries) GetExtendedItemsForGroceryList(ctx context.Context, groceryListID int64) ([]GetExtendedItemsForGroceryListRow, error) {
	rows, err := q.db.QueryContext(ctx, getExtendedItemsForGroceryList, groceryListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExtendedItemsForGroceryListRow
	for rows.Next() {
		var i GetExtendedItemsForGroceryListRow
		if err := rows.Scan(
			&i.Item.ID,
			&i.Item.CreatedAt,
			&i.Item.UpdatedAt,
			&i.Item.GroceryListID,
			&i.Item.RecipeInstanceID,
			&i.Item.IngredientID,
			&i.Item.Name,
			&i.Item.Description,
			&i.Item.Amount,
			&i.Item.Units,
			&i.Item.StandardAmount,
			&i.Item.StandardUnits,
			&i.Ingredient.ID,
			&i.Ingredient.CreatedAt,
			&i.Ingredient.UpdatedAt,
			&i.Ingredient.Name,
			&i.Ingredient.Description,
			&i.Ingredient.RecipeID,
			&i.Ingredient.Amount,
			&i.Ingredient.Units,
			&i.Ingredient.StandardAmount,
			&i.Ingredient.StandardUnits,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExtendedItemsForRecipeInstance = `-- name: GetExtendedItemsForRecipeInstance :many
SELECT it.id, it.created_at, it.updated_at, it.grocery_list_id, it.recipe_instance_id, it.ingredient_id, it.name, it.description, it.amount, it.units, it.standard_amount, it.standard_units, i.id, i.created_at, i.updated_at, i.name, i.description, i.recipe_id, i.amount, i.units, i.standard_amount, i.standard_units FROM items it
LEFT JOIN ingredients i ON it.ingredient_id = i.id
WHERE it.recipe_instance_id = ?
`

type GetExtendedItemsForRecipeInstanceRow struct {
	Item       Item
	Ingredient Ingredient
}

func (q *Queries) GetExtendedItemsForRecipeInstance(ctx context.Context, recipeInstanceID sql.NullInt64) ([]GetExtendedItemsForRecipeInstanceRow, error) {
	rows, err := q.db.QueryContext(ctx, getExtendedItemsForRecipeInstance, recipeInstanceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExtendedItemsForRecipeInstanceRow
	for rows.Next() {
		var i GetExtendedItemsForRecipeInstanceRow
		if err := rows.Scan(
			&i.Item.ID,
			&i.Item.CreatedAt,
			&i.Item.UpdatedAt,
			&i.Item.GroceryListID,
			&i.Item.RecipeInstanceID,
			&i.Item.IngredientID,
			&i.Item.Name,
			&i.Item.Description,
			&i.Item.Amount,
			&i.Item.Units,
			&i.Item.StandardAmount,
			&i.Item.StandardUnits,
			&i.Ingredient.ID,
			&i.Ingredient.CreatedAt,
			&i.Ingredient.UpdatedAt,
			&i.Ingredient.Name,
			&i.Ingredient.Description,
			&i.Ingredient.RecipeID,
			&i.Ingredient.Amount,
			&i.Ingredient.Units,
			&i.Ingredient.StandardAmount,
			&i.Ingredient.StandardUnits,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItem = `-- name: GetItem :one
SELECT id, created_at, updated_at, grocery_list_id, recipe_instance_id, ingredient_id, name, description, amount, units, standard_amount, standard_units FROM items
WHERE id = ?
`

func (q *Queries) GetItem(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroceryListID,
		&i.RecipeInstanceID,
		&i.IngredientID,
		&i.Name,
		&i.Description,
		&i.Amount,
		&i.Units,
		&i.StandardAmount,
		&i.StandardUnits,
	)
	return i, err
}

const getItemAndGroceryList = `-- name: GetItemAndGroceryList :one
SELECT it.id, it.created_at, it.updated_at, it.grocery_list_id, it.recipe_instance_id, it.ingredient_id, it.name, it.description, it.amount, it.units, it.standard_amount, it.standard_units, gl.id, gl.created_at, gl.updated_at, gl.name, gl.owner_id FROM items it
JOIN grocery_lists gl ON it.grocery_list_id = gl.id
WHERE it.id = ?
`

type GetItemAndGroceryListRow struct {
	Item        Item
	GroceryList GroceryList
}

func (q *Queries) GetItemAndGroceryList(ctx context.Context, id int64) (GetItemAndGroceryListRow, error) {
	row := q.db.QueryRowContext(ctx, getItemAndGroceryList, id)
	var i GetItemAndGroceryListRow
	err := row.Scan(
		&i.Item.ID,
		&i.Item.CreatedAt,
		&i.Item.UpdatedAt,
		&i.Item.GroceryListID,
		&i.Item.RecipeInstanceID,
		&i.Item.IngredientID,
		&i.Item.Name,
		&i.Item.Description,
		&i.Item.Amount,
		&i.Item.Units,
		&i.Item.StandardAmount,
		&i.Item.StandardUnits,
		&i.GroceryList.ID,
		&i.GroceryList.CreatedAt,
		&i.GroceryList.UpdatedAt,
		&i.GroceryList.Name,
		&i.GroceryList.OwnerID,
	)
	return i, err
}

const getItemsForGroceryList = `-- name: GetItemsForGroceryList :many
SELECT id, created_at, updated_at, grocery_list_id, recipe_instance_id, ingredient_id, name, description, amount, units, standard_amount, standard_units FROM items it 
WHERE it.grocery_list_id = ?
`

func (q *Queries) GetItemsForGroceryList(ctx context.Context, groceryListID int64) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsForGroceryList, groceryListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroceryListID,
			&i.RecipeInstanceID,
			&i.IngredientID,
			&i.Name,
			&i.Description,
			&i.Amount,
			&i.Units,
			&i.StandardAmount,
			&i.StandardUnits,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsForRecipeInstance = `-- name: GetItemsForRecipeInstance :many
SELECT id, created_at, updated_at, grocery_list_id, recipe_instance_id, ingredient_id, name, description, amount, units, standard_amount, standard_units FROM items it 
WHERE it.recipe_instance_id = ?
`

func (q *Queries) GetItemsForRecipeInstance(ctx context.Context, recipeInstanceID sql.NullInt64) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsForRecipeInstance, recipeInstanceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroceryListID,
			&i.RecipeInstanceID,
			&i.IngredientID,
			&i.Name,
			&i.Description,
			&i.Amount,
			&i.Units,
			&i.StandardAmount,
			&i.StandardUnits,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
