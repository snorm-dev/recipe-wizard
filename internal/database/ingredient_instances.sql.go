// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: ingredient_instances.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createIngredientInstance = `-- name: CreateIngredientInstance :execresult
INSERT INTO ingredient_instances (created_at, updated_at, ingredient_id, grocery_list_id, recipe_instance_id)
VALUES (?, ?, ?, ?, ?)
`

type CreateIngredientInstanceParams struct {
	CreatedAt        time.Time
	UpdatedAt        time.Time
	IngredientID     sql.NullInt64
	GroceryListID    int64
	RecipeInstanceID sql.NullInt64
}

func (q *Queries) CreateIngredientInstance(ctx context.Context, arg CreateIngredientInstanceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createIngredientInstance,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IngredientID,
		arg.GroceryListID,
		arg.RecipeInstanceID,
	)
}

const getIngredientInstance = `-- name: GetIngredientInstance :one
SELECT id, created_at, updated_at, grocery_list_id, recipe_instance_id, ingredient_id FROM ingredient_instances
WHERE id = ?
`

func (q *Queries) GetIngredientInstance(ctx context.Context, id int64) (IngredientInstance, error) {
	row := q.db.QueryRowContext(ctx, getIngredientInstance, id)
	var i IngredientInstance
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroceryListID,
		&i.RecipeInstanceID,
		&i.IngredientID,
	)
	return i, err
}
