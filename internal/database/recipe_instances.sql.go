// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: recipe_instances.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const addRecipeToGroceryList = `-- name: AddRecipeToGroceryList :execresult
INSERT INTO recipe_instances (created_at, updated_at, grocery_list_id, recipe_id)
VALUES (?, ?, ?, ?)
`

type AddRecipeToGroceryListParams struct {
	CreatedAt     time.Time
	UpdatedAt     time.Time
	GroceryListID int64
	RecipeID      int64
}

func (q *Queries) AddRecipeToGroceryList(ctx context.Context, arg AddRecipeToGroceryListParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addRecipeToGroceryList,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.GroceryListID,
		arg.RecipeID,
	)
}

const getRecipeInstance = `-- name: GetRecipeInstance :one
SELECT id, created_at, updated_at, grocery_list_id, recipe_id FROM recipe_instances
WHERE id = ?
`

func (q *Queries) GetRecipeInstance(ctx context.Context, id int64) (RecipeInstance, error) {
	row := q.db.QueryRowContext(ctx, getRecipeInstance, id)
	var i RecipeInstance
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroceryListID,
		&i.RecipeID,
	)
	return i, err
}

const getRecipesInGroceryList = `-- name: GetRecipesInGroceryList :many
SELECT r.id, r.created_at, r.updated_at, r.name, r.description, r.url, r.prep_time, r.cook_time, r.total_time, r.owner_id FROM recipe_instances ri 
JOIN recipes r ON r.id = ri.recipe_id
WHERE ri.grocery_list_id = ?
`

func (q *Queries) GetRecipesInGroceryList(ctx context.Context, groceryListID int64) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, getRecipesInGroceryList, groceryListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Url,
			&i.PrepTime,
			&i.CookTime,
			&i.TotalTime,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
