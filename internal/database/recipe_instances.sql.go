// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: recipe_instances.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createRecipeInstance = `-- name: CreateRecipeInstance :execresult
INSERT INTO recipe_instances (created_at, updated_at, grocery_list_id, recipe_id)
VALUES (?, ?, ?, ?)
`

type CreateRecipeInstanceParams struct {
	CreatedAt     time.Time
	UpdatedAt     time.Time
	GroceryListID int64
	RecipeID      int64
}

func (q *Queries) CreateRecipeInstance(ctx context.Context, arg CreateRecipeInstanceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRecipeInstance,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.GroceryListID,
		arg.RecipeID,
	)
}

const getIngredientInstancesForRecipeInstance = `-- name: GetIngredientInstancesForRecipeInstance :many
SELECT id, created_at, updated_at, grocery_list_id, recipe_instance_id, ingredient_id FROM ingredient_instances ii 
WHERE ii.recipe_instance_id = ?
`

func (q *Queries) GetIngredientInstancesForRecipeInstance(ctx context.Context, recipeInstanceID sql.NullInt64) ([]IngredientInstance, error) {
	rows, err := q.db.QueryContext(ctx, getIngredientInstancesForRecipeInstance, recipeInstanceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IngredientInstance
	for rows.Next() {
		var i IngredientInstance
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroceryListID,
			&i.RecipeInstanceID,
			&i.IngredientID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipeInstance = `-- name: GetRecipeInstance :one
SELECT id, created_at, updated_at, grocery_list_id, recipe_id FROM recipe_instances
WHERE id = ?
`

func (q *Queries) GetRecipeInstance(ctx context.Context, id int64) (RecipeInstance, error) {
	row := q.db.QueryRowContext(ctx, getRecipeInstance, id)
	var i RecipeInstance
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroceryListID,
		&i.RecipeID,
	)
	return i, err
}

const getRecipeInstancesInGroceryList = `-- name: GetRecipeInstancesInGroceryList :many
SELECT id, created_at, updated_at, grocery_list_id, recipe_id FROM recipe_instances ri 
WHERE ri.grocery_list_id = ?
`

func (q *Queries) GetRecipeInstancesInGroceryList(ctx context.Context, groceryListID int64) ([]RecipeInstance, error) {
	rows, err := q.db.QueryContext(ctx, getRecipeInstancesInGroceryList, groceryListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecipeInstance
	for rows.Next() {
		var i RecipeInstance
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroceryListID,
			&i.RecipeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
