// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: recipe_instances.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createRecipeInstance = `-- name: CreateRecipeInstance :execresult
INSERT INTO recipe_instances (created_at, updated_at, grocery_list_id, recipe_id)
VALUES (?, ?, ?, ?)
`

type CreateRecipeInstanceParams struct {
	CreatedAt     time.Time
	UpdatedAt     time.Time
	GroceryListID int64
	RecipeID      int64
}

func (q *Queries) CreateRecipeInstance(ctx context.Context, arg CreateRecipeInstanceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRecipeInstance,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.GroceryListID,
		arg.RecipeID,
	)
}

const getExtendedRecipeInstance = `-- name: GetExtendedRecipeInstance :one
SELECT ri.id, ri.created_at, ri.updated_at, ri.grocery_list_id, ri.recipe_id, r.id, r.created_at, r.updated_at, r.name, r.description, r.url, r.prep_time, r.cook_time, r.total_time, r.owner_id from recipe_instances ri 
JOIN recipes r ON ri.recipe_id = r.id
WHERE ri.id = ?
`

type GetExtendedRecipeInstanceRow struct {
	RecipeInstance RecipeInstance
	Recipe         Recipe
}

func (q *Queries) GetExtendedRecipeInstance(ctx context.Context, id int64) (GetExtendedRecipeInstanceRow, error) {
	row := q.db.QueryRowContext(ctx, getExtendedRecipeInstance, id)
	var i GetExtendedRecipeInstanceRow
	err := row.Scan(
		&i.RecipeInstance.ID,
		&i.RecipeInstance.CreatedAt,
		&i.RecipeInstance.UpdatedAt,
		&i.RecipeInstance.GroceryListID,
		&i.RecipeInstance.RecipeID,
		&i.Recipe.ID,
		&i.Recipe.CreatedAt,
		&i.Recipe.UpdatedAt,
		&i.Recipe.Name,
		&i.Recipe.Description,
		&i.Recipe.Url,
		&i.Recipe.PrepTime,
		&i.Recipe.CookTime,
		&i.Recipe.TotalTime,
		&i.Recipe.OwnerID,
	)
	return i, err
}

const getExtendedRecipeInstancesInGroceryList = `-- name: GetExtendedRecipeInstancesInGroceryList :many
SELECT ri.id, ri.created_at, ri.updated_at, ri.grocery_list_id, ri.recipe_id, r.id, r.created_at, r.updated_at, r.name, r.description, r.url, r.prep_time, r.cook_time, r.total_time, r.owner_id from recipe_instances ri 
JOIN recipes r ON ri.recipe_id = r.id
WHERE ri.grocery_list_id = ?
`

type GetExtendedRecipeInstancesInGroceryListRow struct {
	RecipeInstance RecipeInstance
	Recipe         Recipe
}

func (q *Queries) GetExtendedRecipeInstancesInGroceryList(ctx context.Context, groceryListID int64) ([]GetExtendedRecipeInstancesInGroceryListRow, error) {
	rows, err := q.db.QueryContext(ctx, getExtendedRecipeInstancesInGroceryList, groceryListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExtendedRecipeInstancesInGroceryListRow
	for rows.Next() {
		var i GetExtendedRecipeInstancesInGroceryListRow
		if err := rows.Scan(
			&i.RecipeInstance.ID,
			&i.RecipeInstance.CreatedAt,
			&i.RecipeInstance.UpdatedAt,
			&i.RecipeInstance.GroceryListID,
			&i.RecipeInstance.RecipeID,
			&i.Recipe.ID,
			&i.Recipe.CreatedAt,
			&i.Recipe.UpdatedAt,
			&i.Recipe.Name,
			&i.Recipe.Description,
			&i.Recipe.Url,
			&i.Recipe.PrepTime,
			&i.Recipe.CookTime,
			&i.Recipe.TotalTime,
			&i.Recipe.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipeInstance = `-- name: GetRecipeInstance :one
SELECT id, created_at, updated_at, grocery_list_id, recipe_id FROM recipe_instances
WHERE id = ?
`

func (q *Queries) GetRecipeInstance(ctx context.Context, id int64) (RecipeInstance, error) {
	row := q.db.QueryRowContext(ctx, getRecipeInstance, id)
	var i RecipeInstance
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroceryListID,
		&i.RecipeID,
	)
	return i, err
}

const getRecipeInstancesInGroceryList = `-- name: GetRecipeInstancesInGroceryList :many
SELECT id, created_at, updated_at, grocery_list_id, recipe_id FROM recipe_instances ri 
WHERE ri.grocery_list_id = ?
`

func (q *Queries) GetRecipeInstancesInGroceryList(ctx context.Context, groceryListID int64) ([]RecipeInstance, error) {
	rows, err := q.db.QueryContext(ctx, getRecipeInstancesInGroceryList, groceryListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecipeInstance
	for rows.Next() {
		var i RecipeInstance
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroceryListID,
			&i.RecipeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
