// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: recipes.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createRecipe = `-- name: CreateRecipe :exec
INSERT INTO recipes(id, created_at, updated_at, name, description, url, prep_time, cook_time, total_time)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateRecipeParams struct {
	ID          string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Description sql.NullString
	Url         sql.NullString
	PrepTime    sql.NullTime
	CookTime    sql.NullTime
	TotalTime   sql.NullTime
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) error {
	_, err := q.db.ExecContext(ctx, createRecipe,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Description,
		arg.Url,
		arg.PrepTime,
		arg.CookTime,
		arg.TotalTime,
	)
	return err
}

const getRecipe = `-- name: GetRecipe :one
SELECT id, created_at, updated_at, name, description, url, prep_time, cook_time, total_time FROM recipes
WHERE id = ?
`

func (q *Queries) GetRecipe(ctx context.Context, id string) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipe, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.PrepTime,
		&i.CookTime,
		&i.TotalTime,
	)
	return i, err
}

const getRecipes = `-- name: GetRecipes :many
SELECT id, created_at, updated_at, name, description, url, prep_time, cook_time, total_time FROM recipes
`

func (q *Queries) GetRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, getRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Url,
			&i.PrepTime,
			&i.CookTime,
			&i.TotalTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
