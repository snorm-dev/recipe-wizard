// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: meals.sql

package database

import (
	"context"
	"time"
)

const createMeal = `-- name: CreateMeal :one
INSERT INTO meals (created_at, updated_at, grocery_list_id, recipe_id)
VALUES (?, ?, ?, ?) RETURNING id, created_at, updated_at, grocery_list_id, recipe_id
`

type CreateMealParams struct {
	CreatedAt     time.Time
	UpdatedAt     time.Time
	GroceryListID int64
	RecipeID      int64
}

func (q *Queries) CreateMeal(ctx context.Context, arg CreateMealParams) (Meal, error) {
	row := q.db.QueryRowContext(ctx, createMeal,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.GroceryListID,
		arg.RecipeID,
	)
	var i Meal
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroceryListID,
		&i.RecipeID,
	)
	return i, err
}

const getExtendedMeal = `-- name: GetExtendedMeal :one
SELECT m.id, m.created_at, m.updated_at, m.grocery_list_id, m.recipe_id, r.id, r.created_at, r.updated_at, r.name, r.description, r.url, r.prep_time, r.cook_time, r.total_time, r.owner_id from meals m 
JOIN recipes r ON m.recipe_id = r.id
WHERE m.id = ?
`

type GetExtendedMealRow struct {
	Meal   Meal
	Recipe Recipe
}

func (q *Queries) GetExtendedMeal(ctx context.Context, id int64) (GetExtendedMealRow, error) {
	row := q.db.QueryRowContext(ctx, getExtendedMeal, id)
	var i GetExtendedMealRow
	err := row.Scan(
		&i.Meal.ID,
		&i.Meal.CreatedAt,
		&i.Meal.UpdatedAt,
		&i.Meal.GroceryListID,
		&i.Meal.RecipeID,
		&i.Recipe.ID,
		&i.Recipe.CreatedAt,
		&i.Recipe.UpdatedAt,
		&i.Recipe.Name,
		&i.Recipe.Description,
		&i.Recipe.Url,
		&i.Recipe.PrepTime,
		&i.Recipe.CookTime,
		&i.Recipe.TotalTime,
		&i.Recipe.OwnerID,
	)
	return i, err
}

const getExtendedMealsInGroceryList = `-- name: GetExtendedMealsInGroceryList :many
SELECT m.id, m.created_at, m.updated_at, m.grocery_list_id, m.recipe_id, r.id, r.created_at, r.updated_at, r.name, r.description, r.url, r.prep_time, r.cook_time, r.total_time, r.owner_id from meals m 
JOIN recipes r ON m.recipe_id = r.id
WHERE m.grocery_list_id = ?
`

type GetExtendedMealsInGroceryListRow struct {
	Meal   Meal
	Recipe Recipe
}

func (q *Queries) GetExtendedMealsInGroceryList(ctx context.Context, groceryListID int64) ([]GetExtendedMealsInGroceryListRow, error) {
	rows, err := q.db.QueryContext(ctx, getExtendedMealsInGroceryList, groceryListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExtendedMealsInGroceryListRow
	for rows.Next() {
		var i GetExtendedMealsInGroceryListRow
		if err := rows.Scan(
			&i.Meal.ID,
			&i.Meal.CreatedAt,
			&i.Meal.UpdatedAt,
			&i.Meal.GroceryListID,
			&i.Meal.RecipeID,
			&i.Recipe.ID,
			&i.Recipe.CreatedAt,
			&i.Recipe.UpdatedAt,
			&i.Recipe.Name,
			&i.Recipe.Description,
			&i.Recipe.Url,
			&i.Recipe.PrepTime,
			&i.Recipe.CookTime,
			&i.Recipe.TotalTime,
			&i.Recipe.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMeal = `-- name: GetMeal :one
SELECT id, created_at, updated_at, grocery_list_id, recipe_id FROM meals
WHERE id = ?
`

func (q *Queries) GetMeal(ctx context.Context, id int64) (Meal, error) {
	row := q.db.QueryRowContext(ctx, getMeal, id)
	var i Meal
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroceryListID,
		&i.RecipeID,
	)
	return i, err
}

const getMealsInGroceryList = `-- name: GetMealsInGroceryList :many
SELECT id, created_at, updated_at, grocery_list_id, recipe_id FROM meals m 
WHERE m.grocery_list_id = ?
`

func (q *Queries) GetMealsInGroceryList(ctx context.Context, groceryListID int64) ([]Meal, error) {
	rows, err := q.db.QueryContext(ctx, getMealsInGroceryList, groceryListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meal
	for rows.Next() {
		var i Meal
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroceryListID,
			&i.RecipeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
