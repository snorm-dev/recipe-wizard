---
openapi: 3.1.0
info:
  title: Recipe Wizard
  description: A grocery list aggregator to simplify shoppping for recipes.
  contact:
    name: Seth Norman
    email: snorman7384@gmail.com
  version: 0.1.0
servers:
  - url: https://recipe-wizard.snorm.dev/v1
    description: Production Server
paths:
  '/ping':
    get:
      tags:
        - 'Health'
      description: Check the server is responding to requests
      operationId: ping
      responses:
        '200':
          description: Success.
          content:
            text/plain:
              schema:
                type: string
        default:
          description: the server does not respond
  '/users':
    post:
      tags:
        - 'Users'
      summary: Create a new user.
      description: Create a new user with basic info.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        default:
          description: There was an error creating the user resource
          $ref: '#/components/responses/GeneralError'
  '/login':
    post:
      tags:
        - 'Users'
      summary: Login to get token
      description: Submit login credentials to obtain an access token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200': 
          description: The user was successfully logged in
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/LoginResponse'
        default:
          description: There was an error logging in with the given credentials
          $ref: '#/components/responses/GeneralError'
  '/recipes':
    get:
      tags:
        - 'Recipes'
      summary: Get recipes for user
      description: Get all recipes for the logged in user
      operationId: getRecipesForUser
      parameters:
        - $ref: '#/components/parameters/ReturnIngredients'
      responses:
        '200':
          description: All recipes are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        default:
          description: Unable to return all recipes
          $ref: '#/components/responses/GeneralError'
    post:
      tags:
        - 'Recipes'
      summary: Create a new recipe.
      description: Create a new recipe from a URL.
      operationId: createRecipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRecipeRequest'
      responses:
        '201':
          description: The recipe was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        default:
          description: There was an error creating the recipe
          $ref: '#/components/responses/GeneralError'
  '/recipes/{recipe_id}':
    get:
      tags:
        - 'Recipes'
      summary: Get a recipe
      description: Get a single recipe by id
      operationId: getRecipe
      parameters:
        - $ref: '#/components/parameters/RecipeID'
        - $ref: '#/components/parameters/ReturnIngredients'
      responses:
        '200':
          description: Recipe with the given id is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        default:
          description: Unable to get recipe
          $ref: '#/components/responses/GeneralError'
  '/recipes/{recipe_id}/ingredients':
    get:
      tags:
        - 'Recipes'
        - 'Ingredients'
      description: Get all ingredients for a recipe
      operationId: getIngredientsForRecipe
      parameters:
        - $ref: '#/components/parameters/RecipeID'
      responses:
        '200':
          description: Ingredients for the given recipe are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
        default:
          description: Unable to get ingredients
          $ref: '#/components/responses/GeneralError'
  # '/grocery-lists':
  #   get:
  #     summary: Get all grocery lists for a user
  #     operationId: getGroceryListsForUser
  #     parameters:
  #     responses:
  #   post:
  #     summary: Create a new grocery list
  #     operationId: createGroceryList
  #     parameters:
  #     requestBody:
  #     responses:
  # '/grocery-lists/{grocery_list_id}':
  #   get:
  #     summary: Get a single grocery list
  #     operationId: getGroceryList
  #     parameters:
  #     responses:
  # '/grocery-lists/{grocery_list_id}/meals':
  #   get:
  #     summary: Get all mealsin the grocery list
  #     operationId: getMealsForGroceryList
  #     parameters:
  #     responses:
  #   post:
  #     summary: Create a meal of the recipe for the grocery list
  #     operationId: createMealForGroceryList
  #     parameters:
  #     requestBody:
  #     responses:
  # '/grocery-lists/{grocery_list_id}/items':
  #   get:
  #     summary: Get all items in the grocery list
  #     operationId: getItemsForGroceryList
  #     parameters:
  #     responses:
  #   post: TODO
  # '/grocery-lists/{grocery_list_id}/items/{item_name}': TODO
  # '/items/{item_id}': TODO
  # '/items/{item_id}/status': TODO
components:
  schemas:
    CreateUserRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        expires_in_seconds:
          type: integer
    CreateUserResponse:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - username
        - first_name
        - last_name
        - token
      properties:
        id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        token:
          type: string
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      required: 
        - token
      properties:
        token:
          type: string
    CreateRecipeRequest:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          format: uri
    Recipe:
      type: object
      required: [id, created_at, updated_at, name, owner_id]
      properties:
        id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        name:
          type: string
        description:
          type: string
        url:
          type: string
          format: uri
        prep_time:
          type: string
        cook_time:
          type: string
        total_time:
          type: string
        owner_id:
          type: integer
          format: int64
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
    Ingredient:
      type: object
      required: [id, created_at, updated_at, name, measure, recipe_id]
      properties:
        id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        name:
          type: string
        description:
          type: string
        measure:
          $ref: '#/components/schemas/Measure'
        recipe_id:
          type: integer
          format: int64
    Measure:
      type: object
      required: [amount, units, standard_amount, standard_units]
      properties:
        amount:
          type: number
          format: double
        units:
          type: string
        standard_amount:
          type: number
          format: double
        standard_units:
          type: string
          enum:
            - fl. oz.
            - oz
            - whole
    GeneralError:
      type: object
      required:
        - error
      properties:
        error:
          type: string
  parameters:
    ReturnIngredients:
      name: return-ingredients
      in: query
      description: Whether to return ingredient data in the response
      allowEmptyValue: true
      schema:
        type: boolean
    RecipeID:
      name: recipe_id
      in: path
      description: The id of the recipe in interest
      required: true
      schema:
        type: integer
        format: int64
  responses:
    GeneralError:
      description: An error has occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
          examples:
            errNotFound:
              summary: The requested resource does not exist
              value:
                error: The requested resource does not exist
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
tags:
  - name: 'Health'
    description: Operations to check the health of the system
  - name: 'Users'
    description: Operations on users
  - name: 'Recipes'
    description: Operations on recipes
  - name: 'Ingredients'
    description: Operations on ingredients
security:
  - bearerAuth: []
